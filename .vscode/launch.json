{
    "configurations": [
    {
        "name": "Launch Chrome",
        "request": "launch",
        "type": "chrome",
        "url": "http://localhost:8080",
        "webRoot": "${workspaceFolder}"
    }
    ]
} pygamer

# Inicializar pygame
pygame.init()

# Dimensiones de la ventana
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Juego de Plataformas")

			}# Colores
 	WHITE = (255, 255, 255)
	BLACK = (0, 0, 0)
	BLUE = (0, 0, 255)
	GREEN = (0, 255, 0)
	RED = (255, 0, 0)

# Configuraci贸n del juego
FPS = 60
GRAVITY = 0.8
JUMP_STRENGTH = -15

# Clase Jugador
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((40, 60))
        self.image.fill(BLUE)
        self.rect = self.image.get_rect()
        self.rect.center = (WIDTH // 2, HEIGHT // 2)
        self.vel_y = 0
        self.jumping = False
        self.score = 0

    def update(self):
        self.gravity()
        self.controls()

    def gravity(self):
        # Aplicar gravedad
        self.vel_y += GRAVITY
        if self.vel_y > 10:
            self.vel_y = 10

        # Mover hacia abajo
        self.rect.y += self.vel_y

        # No caer por debajo de la pantalla
        if self.rect.bottom >= HEIGHT:
            self.rect.bottom = HEIGHT
            self.vel_y = 0
            self.jumping = False

    def controls(self):
        keys = pygame.key.get_pressed()

        # Movimiento a la izquierda y derecha
        if keys[pygame.K_LEFT]:
            self.rect.x -= 5
        if keys[pygame.K_RIGHT]:
            self.rect.x += 5

        # Saltar
        if keys[pygame.K_SPACE] and not self.jumping:
            self.vel_y = JUMP_STRENGTH
            self.jumping = True

    def jump(self):
        if not self.jumping:
            self.vel_y = JUMP_STRENGTH
            self.jumping = True

# Clase Plataforma
class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height):
        super().__init__()
        self.image = pygame.Surface((width, height))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

# Clase Moneda
class Coin(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((20, 20))
        self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

# Funci贸n principal del juego
def game():
    running = True
    clock = pygame.time.Clock()

    # Grupos de sprites
    all_sprites = pygame.sprite.Group()
    platforms = pygame.sprite.Group()
    coins = pygame.sprite.Group()

    # Instanciar el jugador
    player = Player()
    all_sprites.add(player)

    # Instanciar plataformas
    platform1 = Platform(0, HEIGHT - 40, WIDTH, 40)
    platform2 = Platform(WIDTH // 4, HEIGHT - 200, 200, 20)
    platform3 = Platform(WIDTH * 3 // 4 - 100, HEIGHT - 300, 200, 20)
    platforms.add(platform1, platform2, platform3)
    all_sprites.add(platform1, platform2, platform3)

    # Instanciar monedas
    for i in range(5):
        coin = Coin(random.randint(50, WIDTH - 50), random.randint(50, HEIGHT - 100))
        coins.add(coin)
        all_sprites.add(coin)

    # Bucle principal del juego
    while running:
        clock.tick(FPS)

        # Manejar eventos
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        # Actualizar
        all_sprites.update()

        # Detecci贸n de colisiones con plataformas
        hits = pygame.sprite.spritecollide(player, platforms, False)
        if hits:
            if player.vel_y > 0:
                player.rect.bottom = hits[0].rect.top
                player.vel_y = 0
                player.jumping = False

        # Detecci贸n de colisiones con monedas
        collected_coins = pygame.sprite.spritecollide(player, coins, True)
        for coin in collected_coins:
            player.score += 1

        # Dibujar
        screen.fill(WHITE)
        all_sprites.draw(screen)

        # Mostrar puntaje
        font = pygame.font.Font(None, 36)
        score_text = font.render(f"Puntaje: {player.score}", True, BLACK)
        screen.blit(score_text, (10, 10))

        # Actualizar pantalla
        pygame.display.flip()

    pygame.quit()

# Iniciar el juego
if __name__ == '__main__':
    game()
